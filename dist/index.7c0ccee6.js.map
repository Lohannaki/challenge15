{"mappings":"AAAA,MAAM;IACJ,CAAC,MAAM,GAAG,EAAE,CAAC;IACb,CAAC,WAAW,CAAC;IAEb,YAAY,KAAK,CAAI;QACnB,IAAI,CAAC,KAAK,GAAG;QACb,IAAI,CAAC,CAAC,WAAW,GAAG,SAAS,aAAa,CAAC;IAC7C;IAEA,CAAC,MAAM,CAAC,CAAC;QACP,+CAA+C;QAC/C,EAAE,cAAc;QAEhB,gFAAgF;QAChF,kEAAkE;QAClE,MAAM,WAAW,IAAI,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YACjC,OAAO;gBACL,CAAC,MAAM,IAAI,CAAC,EAAE,MAAM,KAAK;YAC3B;QACF;QAEA,0DAA0D;QAC1D,MAAM,eAAe,SAAS,aAAa,CAAC;QAE5C,aAAa,SAAS,CAAC,GAAG,CAAC;QAC3B,qFAAqF;QACrF,aAAa,WAAW,GAAG,SAAS,GAAG,CAAC,CAAC,KAAO,KAAK,SAAS,CAAC;QAE/D,8DAA8D;QAC9D,WAAW;YACT,aAAa,SAAS,CAAC,MAAM,CAAC;QAChC,GAAG;QAEH,OAAO;IACT;IAEA,SAAS,KAAK,EAAE;QACd,IAAI,CAAE,CAAA,iBAAiB,KAAI,GACzB,MAAM,IAAI,MAAO,CAAC,qCAAqC,CAAC;QAE1D,IAAI,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC;IACpB;IAEA,SAAS;QACP,MAAM,eAAe,SAAS,aAAa,CAAC;QAC5C,aAAa,WAAW,GAAG,IAAI,CAAC,KAAK;QACrC,IAAI,CAAC,CAAC,WAAW,CAAC,MAAM,CAAC;QAEzB,IAAI,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;YACpB,MAAM,eAAe,MAAM,MAAM;YACjC,IAAI,CAAC,CAAC,WAAW,CAAC,MAAM,CAAC;QAC3B;QAEA,MAAM,eAAe,SAAS,aAAa,CAAC;QAC5C,aAAa,IAAI,GAAG;QACpB,aAAa,WAAW,GAAG;QAC3B,IAAI,CAAC,CAAC,WAAW,CAAC,MAAM,CAAC;QAEzB,SAAS,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,WAAW;QAEtC,IAAI,CAAC,CAAC,WAAW,CAAC,gBAAgB,CAChC,UACA,IAAI,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI;IAE1B;AACF;AAEA,MAAM;IACJ,CAAC,YAAY,CAAC;IAEd,YAAY,IAAI,EAAE,IAAI,EAAE,KAAK,CAAE;QAC7B,IAAI,CAAC,IAAI,GAAG;QACZ,IAAI,CAAC,IAAI,GAAG;QACZ,IAAI,CAAC,KAAK,GAAG;QACb,IAAI,CAAC,CAAC,YAAY,GAAG,SAAS,aAAa,CAAC;IAC9C;IAEA,SAAS;QACP,MAAM,iBAAiB,SAAS,aAAa,CAAC;QAC9C,eAAe,SAAS,CAAC,GAAG,CAAC;QAE7B,MAAM,eAAe,SAAS,aAAa,CAAC;QAC5C,aAAa,WAAW,GAAG,IAAI,CAAC,KAAK;QAErC,IAAI,CAAC,CAAC,YAAY,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI;QACnC,IAAI,CAAC,CAAC,YAAY,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI;QAEnC,eAAe,WAAW,CAAC;QAC3B,eAAe,WAAW,CAAC,IAAI,CAAC,CAAC,YAAY;QAE7C,OAAO;IACT;IAEA,IAAI,QAAQ;QACV,OAAO,IAAI,CAAC,CAAC,YAAY,CAAC,KAAK;IACjC;AACF","sources":["app.js"],"sourcesContent":["class Form {\n  #fields = [];\n  #formElement; \n\n  constructor(title, ) {\n    this.title = title;\n    this.#formElement = document.createElement(\"form\"); \n  }\n\n  #submit(e) {\n    // Prevent page from refreshing on form submit.\n    e.preventDefault();\n\n    // Collect the values from the form fields. formData will be an array of objects\n    // with key-value pairs referring to each field's name and value. \n    const formData = this.#fields.map((field) => {\n      return {\n        [field.name]: field.value \n      };\n    });\n\n    // Find the toast element and add the \"show\" class to it. \n    const toastElement = document.querySelector(\"#toast\");\n\n    toastElement.classList.add(\"show\");\n    // Set the text content of the toast element to be a JSON representation of formData.\n    toastElement.textContent = formData.map((el) => JSON.stringify(el));\n\n    // Wait 5 seconds, then remove the show class from the toast. \n    setTimeout(() => {\n      toastElement.classList.remove(\"show\");\n    }, 5000);\n\n    return formData;\n  }\n\n  addField(field) {\n    if (!(field instanceof Field)) {\n      throw new Error (`Invalid argument, please provie field`); \n    }; \n    this.#fields.push(field); \n  }\n\n  render() {\n    const titleElement = document.createElement(\"h1\"); \n    titleElement.textContent = this.title; \n    this.#formElement.append(titleElement); \n\n    this.#fields.forEach((field) => {\n      const fieldElement = field.render(); \n      this.#formElement.append(fieldElement); \n    }); \n\n    const submitButton = document.createElement(\"button\");\n    submitButton.type = \"submit\";\n    submitButton.textContent = \"Submit\";\n    this.#formElement.append(submitButton);\n\n    document.body.append(this.#formElement);\n\n    this.#formElement.addEventListener(\n      \"submit\",\n      this.#submit.bind(this)\n    );\n  }\n}\n\nclass Field {\n  #inputElement;\n\n  constructor(name, type, label) {\n    this.name = name;\n    this.type = type;\n    this.label = label;\n    this.#inputElement = document.createElement(\"input\");\n  }\n\n  render() {\n    const fieldContainer = document.createElement(\"div\");\n    fieldContainer.classList.add(\"field-container\");\n\n    const labelElement = document.createElement(\"label\");\n    labelElement.textContent = this.label;\n\n    this.#inputElement.name = this.name;\n    this.#inputElement.type = this.type;\n\n    fieldContainer.appendChild(labelElement);\n    fieldContainer.appendChild(this.#inputElement);\n\n    return fieldContainer;\n  }\n\n  get value() {\n    return this.#inputElement.value;\n  }\n}\n"],"names":[],"version":3,"file":"index.7c0ccee6.js.map","sourceRoot":"/__parcel_source_root/"}