{"mappings":"","sources":["app.js"],"sourcesContent":["class Form {\n  #fields = [];\n  #formElement; \n\n  constructor(title, ) {\n    this.title = title;\n    this.#formElement = document.createElement(\"form\"); \n  }\n\n  #submit(e) {\n    // Prevent page from refreshing on form submit.\n    e.preventDefault();\n\n    // Collect the values from the form fields. formData will be an array of objects\n    // with key-value pairs referring to each field's name and value. \n    const formData = this.#fields.map((field) => {\n      return {\n        [field.name]: field.value \n      };\n    });\n\n    // Find the toast element and add the \"show\" class to it. \n    const toastElement = document.querySelector(\"#toast\");\n\n    toastElement.classList.add(\"show\");\n    // Set the text content of the toast element to be a JSON representation of formData.\n    toastElement.textContent = formData.map((el) => JSON.stringify(el));\n\n    // Wait 5 seconds, then remove the show class from the toast. \n    setTimeout(() => {\n      toastElement.classList.remove(\"show\");\n    }, 5000);\n\n    return formData;\n  }\n\n  addField(field) {\n    if (!(field instanceof Field)) {\n      throw new Error (`Invalid argument, please provie field`); \n    }; \n    this.#fields.push(field); \n  }\n\n  render() {\n    const titleElement = document.createElement(\"h1\"); \n    titleElement.textContent = this.title; \n    this.#formElement.append(titleElement); \n\n    this.#fields.forEach((field) => {\n      const fieldElement = field.render(); \n      this.#formElement.append(fieldElement); \n    }); \n\n    const submitButton = document.createElement(\"button\");\n    submitButton.type = \"submit\";\n    submitButton.textContent = \"Submit\";\n    this.#formElement.append(submitButton);\n\n    document.body.append(this.#formElement);\n\n    this.#formElement.addEventListener(\n      \"submit\",\n      this.#submit.bind(this)\n    );\n  }\n}\n\nclass Field {\n  #inputElement;\n\n  constructor(name, type, label) {\n    this.name = name;\n    this.type = type;\n    this.label = label;\n    this.#inputElement = document.createElement(\"input\");\n  }\n\n  render() {\n    const fieldContainer = document.createElement(\"div\");\n    fieldContainer.classList.add(\"field-container\");\n\n    const labelElement = document.createElement(\"label\");\n    labelElement.textContent = this.label;\n\n    this.#inputElement.name = this.name;\n    this.#inputElement.type = this.type;\n\n    fieldContainer.appendChild(labelElement);\n    fieldContainer.appendChild(this.#inputElement);\n\n    return fieldContainer;\n  }\n\n  get value() {\n    return this.#inputElement.value;\n  }\n}\n"],"names":[],"version":3,"file":"index.0828aea1.js.map"}